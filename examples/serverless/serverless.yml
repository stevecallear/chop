service: chop-example

provider:
  name: aws
  runtime: go1.x
  stage: dev
  region: eu-west-1
  versionFunctions: false

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  api:
    handler: bin/handler
    events:
      - alb:
          listenerArn: { Ref: HTTPListener }
          priority: 1
          conditions:
            path: /resource
      - http:
          path: /resource
          method: ANY

custom:
  objectPrefix: "${self:service}-${self:provider.stage}"

resources:
  Outputs:
    LoadBalancerDNSName:
      Value: { "Fn::GetAtt": [LoadBalancer, "DNSName"] }
      Export: { Name: "${self:custom.objectPrefix}-LoadBalancerDNSName" }
  Resources:
    VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        CidrBlock: 172.31.0.0/16
        EnableDnsHostnames: true
    InternetGateway:
      Type: "AWS::EC2::InternetGateway"
    VPCGatewayAttachment:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId: { Ref: VPC }
        InternetGatewayId: { Ref: InternetGateway }
    RouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: { Ref: VPC }
    InternetRoute:
      Type: "AWS::EC2::Route"
      DependsOn: VPCGatewayAttachment
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: { Ref: InternetGateway }
        RouteTableId: { Ref: RouteTable }
    SubnetA:
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: "${self:provider.region}a"
        CidrBlock: 172.31.0.0/20
        MapPublicIpOnLaunch: false
        VpcId: { Ref: VPC }
    SubnetB:
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: "${self:provider.region}b"
        CidrBlock: 172.31.16.0/20
        MapPublicIpOnLaunch: false
        VpcId: { Ref: VPC }
    SubnetARouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: { Ref: SubnetA }
        RouteTableId: { Ref: RouteTable }
    SubnetBRouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: { Ref: SubnetB }
        RouteTableId: { Ref: RouteTable }
    SecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName: "http-https"
        GroupDescription: "HTTPS / HTTPS inbound; Nothing outbound"
        VpcId: { Ref: VPC }
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: "80"
            ToPort: "80"
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: "443"
            ToPort: "443"
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: "1"
            ToPort: "1"
            CidrIp: 127.0.0.1/32
    LoadBalancer:
      Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Properties:
        Type: "application"
        Name: "${self:custom.objectPrefix}"
        IpAddressType: "ipv4"
        Scheme: "internet-facing"
        LoadBalancerAttributes:
          - { Key: "deletion_protection.enabled", Value: false }
          - { Key: "routing.http2.enabled", Value: false }
          - { Key: "access_logs.s3.enabled", Value: false }
        SecurityGroups:
          - { Ref: SecurityGroup }
        Subnets:
          - { Ref: SubnetA }
          - { Ref: SubnetB }
    HTTPListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        LoadBalancerArn: { Ref: LoadBalancer }
        Port: 80
        Protocol: "HTTP"
        DefaultActions:
          - Type: "fixed-response"
            Order: 1
            FixedResponseConfig:
              StatusCode: 404
              ContentType: "application/json"
              MessageBody: '{ "not": "found" }'
